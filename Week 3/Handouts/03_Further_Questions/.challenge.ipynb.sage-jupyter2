{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-cc1f2dcb-54e1-4570-92ab-fb9cf593566e.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1607645786594,"exec_count":12,"id":"2ae53b","input":"import math\nx = 7\nis_prime = True\nif x == 1:\n    is_prime = False\nelse:\n    is_prime = True\n\nfor i in range(2,x):\n    if x % i == 0:\n        is_prime = False\n        break\n    else:\n        continue\n\nif is_prime:\n    print(x, \"is prime\")\nelse:\n    print(x, \"is not prime\")\n\n","kernel":"python3","output":{"0":{"name":"stdout","text":"7 is prime\n"}},"pos":2,"start":1607645786575,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1741f2","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"28e27b","input":"terms = 100\n# first two terms\n\ncount = 0\n\n# print(\"Fibonacci sequence:\")\n# while count < terms:\n#     # your code here \n    \n    \n#     count += 1\ndef fib(n):\n    num1, num2 = 0, 1\n    for x in range(1,n+1):\n        sum = num1 + num2\n        print(str(sum) + \" \"+str(x)+\"th\")\n        if x%2 ==0:\n            num1 = sum\n        else:\n            num2 = sum\nfib(terms)\n#using recursion\nterm_recurs = 20\ndef fibonacci(n):\n    if n <=2:\n        return 1\n    else:\n        return (fibonacci(n-1) + fibonacci(n-2)) \nprint(\"Fibonacci sequence:\")\nfor i in range(1,term_recurs+1):\n    print(i, fibonacci(i))","output":{"0":{"name":"stdout","output_type":"stream","text":"1 1th\n1 2th\n2 3th\n3 4th\n5 5th\n8 6th\n13 7th\n21 8th\n34 9th\n55 10th\n89 11th\n144 12th\n233 13th\n377 14th\n610 15th\n987 16th\n1597 17th\n2584 18th\n4181 19th\n6765 20th\n10946 21th\n17711 22th\n28657 23th\n46368 24th\n75025 25th\n121393 26th\n196418 27th\n317811 28th\n514229 29th\n832040 30th\n1346269 31th\n2178309 32th\n3524578 33th\n5702887 34th\n9227465 35th\n14930352 36th\n24157817 37th\n39088169 38th\n63245986 39th\n102334155 40th\n165580141 41th\n267914296 42th\n433494437 43th\n701408733 44th\n1134903170 45th\n1836311903 46th\n2971215073 47th\n4807526976 48th\n7778742049 49th\n12586269025 50th\n20365011074 51th\n32951280099 52th\n53316291173 53th\n86267571272 54th\n139583862445 55th\n225851433717 56th\n365435296162 57th\n591286729879 58th\n956722026041 59th\n1548008755920 60th\n2504730781961 61th\n4052739537881 62th\n6557470319842 63th\n10610209857723 64th\n17167680177565 65th\n27777890035288 66th\n44945570212853 67th\n72723460248141 68th\n117669030460994 69th\n190392490709135 70th\n308061521170129 71th\n498454011879264 72th\n806515533049393 73th\n1304969544928657 74th\n2111485077978050 75th\n3416454622906707 76th\n5527939700884757 77th\n8944394323791464 78th\n14472334024676221 79th\n23416728348467685 80th\n37889062373143906 81th\n61305790721611591 82th\n99194853094755497 83th\n160500643816367088 84th\n259695496911122585 85th\n420196140727489673 86th\n679891637638612258 87th\n1100087778366101931 88th\n1779979416004714189 89th\n2880067194370816120 90th\n4660046610375530309 91th\n7540113804746346429 92th\n12200160415121876738 93th\n19740274219868223167 94th\n31940434634990099905 95th\n51680708854858323072 96th\n83621143489848422977 97th\n135301852344706746049 98th\n218922995834555169026 99th\n354224848179261915075 100th\nFibonacci sequence:\n1 1\n2 1\n3 2\n4 3\n5 5\n6 8\n7 13\n8 21\n9 34\n10 55\n11 89\n12 144\n13 233\n14 377\n15 610\n16 987\n17 1597\n18 2584\n19 4181\n20 6765\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"daf7d8","input":"import math as m\n\ndef split(number):\n    numlist = []\n    num = str(number)\n    for i in num:\n        numlist.append(int(i))\n    return numlist\n\ndef parser(number):\n    sumfac = 0\n    sumlist = []\n    for j in split(number):\n        sumlist.append(m.factorial(j))\n        #print(j)\n    #print(sum(sumlist), number)\n    if sum(sumlist) == number:\n        return True\n    else:\n        return False\n    \nprint(parser(145)) #test true case\nprint(parser(12323456)) #random false case\nprint(parser(40585)) #from internet\n    \n    \n    \n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"True\nFalse\nTrue\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"1ea58d","input":"n = 1234567890987654321\nreverse = 0\ndiv = 10\nni = n\nwhile n > 0:\n    x = n % div\n    n = n // div\n    reverse = reverse * 10\n    reverse = reverse + x\nif ni == reverse:\n    print(\"n is a palindrome!\")\nelse:\n    print(\"n is not a palindrome\")","output":{"0":{"name":"stdout","output_type":"stream","text":"123456789098765432\n1\n1\n12345678909876543\n12\n2\n1234567890987654\n123\n3\n123456789098765\n1234\n4\n12345678909876\n12345\n5\n1234567890987\n123456\n6\n123456789098\n1234567\n7\n12345678909\n12345678\n8\n1234567890\n123456789\n9\n123456789\n1234567890\n0\n12345678\n12345678909\n9\n1234567\n123456789098\n8\n123456\n1234567890987\n7\n12345\n12345678909876\n6\n1234\n123456789098765\n5\n123\n1234567890987654\n4\n12\n12345678909876543\n3\n1\n123456789098765432\n2\n0\n1234567890987654321\n1\nn is a palindrome!\n"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"1413e6","input":"# Question 2","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"2362bd","input":"A simple algorithm to test if a number, x, is prime can be written as follows:\n\n- *If the x is 0 or 1 then x is not prime*\n- *Otherwise, check all integers between 2 and the squareroot of x. If x is divisible by any of these integers, then x is not prime*\n- *If x hasn't been shown to not be prime then x is prime*\n\nBelow is code to implement the algorithm. Can you spot the slight error in the code that increases the run time, especially for large numbers?\n       ","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"458e6b","input":"A palindromic number remains the same when its digits are reversed, for example 34543 is a palindrome. \n\nAn algorithm to check whether a number, x, is a palindrome can be written as follows:\n\n- *n = x*\n- *reverse = 0*\n\n- *repeat while n is greater than zero*\n    - *multiply reverse by ten*\n    - *add the smallest digit of n to reverse (using the modulus operator)*\n    - *remove the smallest digit from n (using the floor division operator)*\n    \n    \n- *if reverse and x are the same number, then x is a palindrome*","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"60a9eb","input":"The Fibonacci sequence is a sequence of numbers where each element in the sequence is the sum of the previous two elements, starting from 0 and 1. The first few elements are given by:\n\n0, 1, 1, 2, 3, 5, ...","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"6206e5","input":"2. Complete the program below to print the first 100 numbers of the fibonacci sequence","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"69474a","input":"# Question 1","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"9ceacf","input":"# Question 4","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"ca14e5","input":"A strong number is a special number whose sum of factorial of digits is equal to the original number.\nFor example: 145 is strong number. Since, 1! + 4! + 5! = 145\n\n4.  Write a program to check if a given number is a strong number","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"ce3f7c","input":"# Question 3","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"fc3221","input":"3. Write a program to check whether a given number is a palindrome","pos":9,"type":"cell"}
{"id":0,"time":1607645567752,"type":"user"}
{"last_load":1607645565476,"type":"file"}
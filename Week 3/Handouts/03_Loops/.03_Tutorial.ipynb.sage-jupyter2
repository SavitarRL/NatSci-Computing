{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-8b7fa747-4ebd-4ed0-aaa6-03dc8bd07fb2.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"eaef06","input":"","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"504604","input":"# Answer\np = 1\ng = 1.5\ns = 100\nfor n in range(21):\n    print(\"Population at time year = \" + str(n) + \" is \" + str(round(p, 2)))\n    p = g * p * (1-(p/s))\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Population at time year = 0 is 1\nPopulation at time year = 1 is 1.48\nPopulation at time year = 2 is 2.19\nPopulation at time year = 3 is 3.22\nPopulation at time year = 4 is 4.67\nPopulation at time year = 5 is 6.68\nPopulation at time year = 6 is 9.35\nPopulation at time year = 7 is 12.72\nPopulation at time year = 8 is 16.65\nPopulation at time year = 9 is 20.82\nPopulation at time year = 10 is 24.73\nPopulation at time year = 11 is 27.92\nPopulation at time year = 12 is 30.19\nPopulation at time year = 13 is 31.61\nPopulation at time year = 14 is 32.43\nPopulation at time year = 15 is 32.87\nPopulation at time year = 16 is 33.1\nPopulation at time year = 17 is 33.21\nPopulation at time year = 18 is 33.27\nPopulation at time year = 19 is 33.3\nPopulation at time year = 20 is 33.32\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"73b672","input":"# Answer\ndna_seq = \"gttccccaagctcttacataaatgtcgtagggttccagctacgtgttgttgggccaccca\"\na_count = 0\nc_count = 0\ng_count = 0\nt_count = 0\nfor let in dna_seq:\n    if let == \"a\":\n        a_count += 1\n    elif let == \"c\":\n        c_count += 1\n    elif let == \"g\":\n        g_count += 1\n    elif let == \"t\":\n        t_count += 1\n    else:\n        print(\"Ensure your dna sequence only contains the letters a, c, g or t\")\nprint(\"Number of  adenine nucleotides: \" + str(a_count))\nprint(\"Number of cytosine nucleotides: \" + str(c_count))\nprint(\"Number of guanine nucleotides: \" + str(g_count))\nprint(\"Number of thymine nucleotides: \" + str(t_count))","output":{"0":{"name":"stdout","output_type":"stream","text":"number of  adenine nucleotides: 12\nnumber of cytosine nucleotides: 17\nnumber of guanine nucleotides: 14\nnumber of thymine nucleotides: 17\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"fb7d69","input":"# Answer\na = 0.1 ;b = 0.01 ;c = 0.01 ;d = 0.00002\nx_0 = 1000 ;y_0 = 20\nx = [x_0] ;y= [y_0]\nfor i in range(20):\n    print(\"Year {} prey {} predator {}\".format(i, x[i], y[i]))\n    x.append(x[i]*(1+a-b*y[i]))\n    y.append(y[i]*(1-c+d*x[i]))\n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"Year 0 prey 1000 predator 20\nYear 1 prey 900.0000000000001 predator 20.2\nYear 2 prey 808.2000000000003 predator 20.3616\nYear 3 prey 724.4575488000003 predator 20.4871089024\nYear 4 prey 648.4828967056867 predator 20.579078627324623\nYear 5 prey 579.8793811784399 predator 20.640191451447006\nYear 6 prey 518.1791048335878 predator 20.673165965857926\nYear 7 prey 462.872988974302 predator 20.680682358884635\nYear 8 prey 413.43499529688177 predator 20.66532612044549\nYear 9 prey 369.34080475242087 predator 20.62954823938933\nYear 10 prey 330.0815457435136 predator 20.575639435963737\nYear 11 prey 295.17331162102386 predator 20.505715818997782\nYear 12 prey 264.1632423285944 predator 20.421713461716866\nYear 13 prey 236.63290614192755 predator 20.32538964793875\nYear 14 prey 212.19963654753235 predator 20.218328871876537\nYear 15 prey 190.5163798201788 predator 20.101952023921985\nYear 16 prey 171.27050653303135 predator 19.977527526221095\nYear 17 prey 154.18194459939986 predator 19.846183476132754\nYear 18 prey 139.0009074470736 predator 19.70892010459596\nYear 19 prey 125.50542039837384 predator 19.566622059136815\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"728fb3","input":"a = 2\nx = 1\nfor i in range(5):\n    print(x)\n    x = x * a","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n4\n8\n16\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"13354d","input":"s = 0\nv = 100\ng = -9.81\nt = 0\ncounter = 0\nDelta_t = 0.01\nwhile s >= 0:\n    counter += 1\n    if counter % 100 == 0:\n        print(\"s is \"+str(s)+\" at time \"+str(t))\n        s = s + v * Delta_t\n        v = v + g * Delta_t\n        t += Delta_t\n    else:\n        s = s + v * Delta_t\n        v = v + g * Delta_t\n        t += Delta_t","output":{"0":{"name":"stdout","output_type":"stream","text":"s is 94.24116899999989 at time 0.9900000000000007\ns is 179.67331899999954 at time 1.9900000000000015\ns is 255.295468999999 at time 2.9899999999999802\ns is 321.1076189999982 at time 3.989999999999959\ns is 377.1097689999972 at time 4.989999999999938\ns is 423.301918999996 at time 5.989999999999917\ns is 459.6840689999944 at time 6.989999999999895\ns is 486.2562189999931 at time 7.989999999999874\ns is 503.0183689999915 at time 8.989999999999853\ns is 509.9705189999902 at time 9.989999999999831\ns is 507.11266899998867 at time 10.98999999999981\ns is 494.4448189999873 at time 11.989999999999789\ns is 471.96696899998597 at time 12.989999999999768\ns is 439.6791189999846 at time 13.989999999999746\ns is 397.5812689999831 at time 14.989999999999725\ns is 345.67341899998144 at time 15.989999999999704\ns is 283.95556899997956 at time 16.989999999999856\ns is 212.4277189999773 at time 17.990000000000013\ns is 131.0898689999749 at time 18.99000000000017\ns is 39.94201899997227 at time 19.990000000000325\n"}},"pos":10,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"2b4a6e","input":"## Question 4\n\n**Projectile flight** Suppose a cannonball is propelled straight into the air with a starting velocity $v_0$. The position of the ball after $t$ seconds is $s(t) = –1/2gt^2 + v_0t$, where $g = 9.81 m/s^2$ is the gravitational force of the earth.\nIn fact, we will confirm the theorem from calculus by a simulation. In our simulation, we will consider how the ball moves in very short time intervals $\\Delta t$. In a short time interval the velocity $v$ is nearly constant, and we can compute the distance the ball moves as $\\Delta s = v\\Delta t$. In our program, we will simply set\n```\nDELTA_T = 0.01\n```\nand update the position by\n```\ns = s + v * DELTA_T\n```\nThe velocity changes constantly — in fact, it is reduced by the gravitational force of the earth. In a short time interval, $\\Delta v = –g\\Delta t$, so we must keep the velocity updated as\n```\nv = v - g * DELTA_T\n```\nIn the next iteration the new velocity is used to update the distance.\nNow run the simulation until the cannonball falls back to the earth. Get the initial velocity as an input (100 m/s is a good value). Update the position and velocity 100 times per second, but print out the position only every full second. Also printout the values from the exact formula $s(t) = –1/2gt^2 + v_0t$ for comparison.","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"330ae1","input":"The exponential map is not a very realistic model of population growth because it does not account for starvation or competition for resources. A more sophisticated model is based on the logistic map:\n$$x_{n+1} = ax_n(1 - x_n/m)$$\nwhere $a$ is the growth rate parameter and $m$ is a parameter related to starvation.\n\nCalculate and print the population for the first 20 years, given $x_0 = 1$, $a = 1.5$ and $m = 100$.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"c96c53","input":"## Question 3\n\nIn biology, a DNA sequence can be represented as a string where each character represents one of the nucleotides adenine (A), cytosine (C), guanine (G), and thymine (T).\n\n1. Given the DNA sequence below, determine the number of adenine nucleotides and print out the result.\n2. Extend your code to print the number of each of the four nuceotides (use `if ... elif`).\n\n```\ndna_seq = \"gttccccaagctcttacataaatgtcgtagggttccagctacgtgttgttgggccaccca\"\n```\nOutput:\n```\nNumber of adenine nucleotides: 12\nNumber of cytosine nucleotides: 17\n...\n```\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"d4a194","input":"## Question 2 (For Credit)\n\nIn a predator-prey simulation, the populations of prey ($x_i$) and predators ($y_i$) are modelled using the following equations:\n\n$$\n\\begin{aligned}\nx_{i+1} = x_i(1 + a - by_i)\\\\\ny_{i+1} = y_i(1 - c + dx_i)\n\\end{aligned}\n$$\n\nWhere $a$ is the prey reproduction rate, $b$ is the predation rate, $c$ is predator reproduction rate with out food and $d$ is the excess predator reproduction rate due to food.\n\nCalculate and print the first 20 years of population values, given $a = 0.1, b = c = 0.01, d = 0.00002$ and initial prey and predator populations of $1000$ and $20$.\n\nOutput:\n\n```\nYear: 0 prey 1000 predator 20\nYear: 1 prey 900.0000000000001 predator 20.2\nYear: 2 prey 808.2000000000003 predator 20.3616\n...\nYear: 19 prey 125.50542039837384 predator 19.566622059136815\n```\nYour program should produce exactly the numbers above.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"f67a93","input":"## Question 1\nAn **iterated map** describes a sequence of values determined by repeatedly applying an arithmetic expression. For example, the expression $x_{n+1} = ax_n$ defines an iterated map in which the value of $x_n$ increases by a constant factor $a$ each step. Given a value for $a=2$ and $x_0 = 1$, we can calculate the sequence of values of $x_n$:\n\n$$x_n = 1, 2, 4, 8, 16, \\ldots$$\n\nThis example demonstrates exponential increase, which could be used as a very simple model for population growth, for example.","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"ffb155","input":"# Tutorial 3","pos":0,"type":"cell"}
{"id":0,"time":1607676399617,"type":"user"}
{"last_load":1607676399033,"type":"file"}